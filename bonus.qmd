---
title: "‚≠ê Bonus ‚≠ê"
filters:
  - shinylive
resources:
  - data/metro_vic_suburbs.csv
---

# (Beta) Fuel Cost Calculator üß™

::: {.callout-important title="Important Disclaimer"}

* Calculations are only **estimates** since it makes many many approximations.
* If it can't find a **road distance** the estimates could be wildly incorrect.

:::

::: {.callout-tip}
For a more accurate estimate, search your route on [Google Maps](https://www.google.com/maps) and enter the distance in the "By Distance" tab.
:::

```{shinylive-python}
#| standalone: true
#| viewerHeight: 1000

from shiny import App, ui, render, reactive
from shinywidgets import render_widget, output_widget
from ipyleaflet import Map, Marker
from math import radians, sin, cos, sqrt, atan2
from pyodide.http import open_url
import pandas as pd
import requests

DEST_LAT = -38.45956579986424
DEST_LON = 145.2472955709111

dist_heuristics = pd.read_csv(open_url('https://raw.githubusercontent.com/bbpi2/bsf-leaders-retreat-2025/refs/heads/main/data/metro_vic_suburbs.csv'))

# Haversine formula copied straight from GenAI
def great_circle_distance(lat1, lon1, lat2, lon2):
    # Radius of Earth in kilometers. Use 3956 for miles
    R = 6371.0

    # Convert degrees to radians
    œÜ1, Œª1 = radians(lat1), radians(lon1)
    œÜ2, Œª2 = radians(lat2), radians(lon2)

    # Differences
    dœÜ = œÜ2 - œÜ1
    dŒª = Œª2 - Œª1

    # Haversine formula
    a = sin(dœÜ / 2)**2 + cos(œÜ1) * cos(œÜ2) * sin(dŒª / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    return R * c  # Distance in kilometers

def dist_to_str(dist):
  return str(round(dist, 2)) + " km"

def cost_to_str(cost):
  return "$" + str(round(cost,2))

app_ui = ui.page_fluid(
  ui.navset_card_tab(
    ui.nav_panel("By Address", 
      ui.br(),
      ui.input_text("source_address", "Where are you coming from?", value = "Monash City Church of Christ", width = '200%'),
      ui.input_slider("n_pax", "Number of People in the Car:", min=2, max=6, value=2, ticks=True), 
      ui.input_task_button("search", "Search"),
      # ui.output_text("debugger"),
      ui.output_text("confirmation"),
      ui.output_table("table_output"),
      # ui.output_text("geocoder"),
      ui.page_fluid(output_widget("map")),
    ),  
    ui.nav_panel("By Distance", 
      ui.br(),
      ui.input_numeric("length", "How long is your drive in km (one way)?", 0),
      ui.input_slider("n_pax_d", "Number of People in the Car:", min=2, max=6, value=2, ticks=True),
      ui.input_task_button("search_d", "Search"),
      ui.output_table("table_output_d")
    )
  )
)

def server(input, output, session):
    @reactive.event(input.search)
    def calc_geocode():
      address = input.source_address()
      url = f"https://nominatim.openstreetmap.org/search?addressdetails=1&q={address}&format=json"
      r = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
      response = r.json()[0]
      return response

    @reactive.calc
    def parse_geocode():
      response = calc_geocode()
      lat = float(response['lat'])
      lon = float(response['lon'])
      name = response['display_name']
      gc_dist = great_circle_distance(lat, lon, DEST_LAT, DEST_LON)

      # Get suburb if exists, "" otherwise
      address = response['address']
      if address.get('suburb') is not None:
        suburb = address['suburb']
      else:
        suburb = ""  
      output = {
        'lat': lat,
        'lon': lon,
        'gc_dist': gc_dist,
        'name': name,
        'suburb': suburb
      }
      return output

    def get_road_dist(search_term):
      # Case when we can't code to a suburb
      if search_term == "":
        return -1
  
      match = dist_heuristics.loc[dist_heuristics['locality'].str.contains(search_term, case=False, na=False), 'distance']

      # Cases when can't find match or match to unknown distance metrics
      if match.empty or match.iloc[0] == "Unknown":
        result = -1
      else:
        result = float(match.iloc[0])/1e3
      return result

    # @output
    # @render.text()
    # def debugger():
    #   return parse_geocode()

    @output
    @render.text()
    def confirmation():
      return f"The address you entered is:\n{parse_geocode()['name']}"
      # return 'hello'

    @output
    @render.table
    def table_output():
      geocode = parse_geocode()
      suburb = geocode['suburb']
      # pprint_dist = lambda dist: str(round(dist, 2)) + " km"

      gc_dist = geocode['gc_dist']
      gc_dist_str = dist_to_str(gc_dist)
      road_dist = get_road_dist(suburb)
      if road_dist < 0:
        road_dist_str = "Unable to calculate road distance, using direct distance instead."
        dist = gc_dist
      else:
        road_dist_str = dist_to_str(road_dist)
        dist = road_dist

      # assuming 10 L/100km & $2.5/L fuel for return
      cost_ppax = dist * 0.1*2.5 / input.n_pax() * 2
      cost_ppax_str = cost_to_str(cost_ppax) #"$" + str(round(cost_ppax,2))

      output = []
      output.append({"Item": "Suburb", "Value": suburb})
      output.append({"Item": "Approximate Road Distance (one way)", "Value": road_dist_str})
      output.append({"Item": "Direct Distance (one way)", "Value": gc_dist_str})
      output.append({"Item": "Fuel Cost for Return/pax", "Value": cost_ppax_str})
      
      return pd.DataFrame(output)
 
    @render_widget  
    def map():
        response = calc_geocode()
        
        lat = float(response['lat'])
        lon = float(response['lon'])
        bounds = ((DEST_LAT, DEST_LON), (lat, lon))

        m = Map(center=(DEST_LAT, DEST_LON), zoom=10)
        # geo_layer = GeoJSON(
        #     data=data
        # )
        m.add(Marker(location=(DEST_LAT, DEST_LON), title="Destination"))
        m.add(Marker(location=(lat, lon)))
        print(type(lat))
        m.fit_bounds(bounds)
        # m.add(geo_layer)
        return m

    @output
    @render.table
    @reactive.event(input.search_d)
    def table_output_d():
      n_pax = input.n_pax()
      length = input.length()
      cost_ppax = length * 0.1*2.5/n_pax * 2

      output = []
      output.append({"Item": "Distance (one way)", "Value": dist_to_str(length)})
      output.append({"Item": "Fuel Cost for Return/pax", "Value": cost_to_str(cost_ppax)})
      return pd.DataFrame(output)

    # @render.table
    # def table_output():
    #   output = []
    #   output.append({"Item": "aa", "Value": 12})
    
    #   return pd.DataFrame(output)


    # @render.text
    # def echo():
    #   response = calc_geocode()
    #   lat = float(response['lat'])
    #   lon = float(response['lon'])
    #   name = response['display_name']
    #   dist = great_circle_distance(lat, lon, DEST_LAT, DEST_LON)
    #   return f'{lat}, {lon}, {name}, {dist}'

app = App(app_ui, server)

```

## All the Nerdy Details

* Source location = where you are coming from.
* Destination location = where you are going (in this case it's set to Cowes Phillip Island)

### What's the difference between Direct Distance \& Road Distance?
* The Direct Distance is equivalent to the [Great Circle Distance](https://en.wikipedia.org/wiki/Great-circle_distance) and measures out the length (in km) "as the crow flies" which is the shortest distance between two points on a sphere. This is done by taking the latitude & longitude of two the locations and computing the [Haversine formula](https://en.wikipedia.org/wiki/Haversine_formula).
* The Road Distance takes into account the roads required to arrive at the destination. This requires sophisticated graph solving algorithms which is often not worth building yourself. By far this is the more accurate measure. 

We will use an <u>approximation</u> of Road Distance by default - if this cannot be found, then it fallsback to using Direct Distance.

### Why are we approximating Road Distance?

Calculating the Road Distance requires sophisticate graph solving algorithms and can be grouped in the class of [shortest path problem](https://en.wikipedia.org/wiki/Shortest_path_problem) (eg. Dijkstra's algorithm). It is not a great idea to write a custom solver because:

* The tool runs almost entirely on the client-side web browser. It is a terrible idea to try to implement graph solving algorithms on web browsers.
* The effort of writing one up from scratch is useful only insofar as it provides pedogogical value. It just doesn't make sense since these tools are already readily available as APIs.

So if there are APIs available, why can't we use it for this tool? Let's consider the two main options:

* **Google Maps** - this arguable the 'best' way to get routing information, but the API is not free.
* [**Open Route Service**](https://openrouteservice.org/) - this is technically free, but has API limits, which require the user to provide an API key.

Since this tool is built using [shinylive](https://shiny.posit.co/py/get-started/shinylive.html), all of its 'servers' are client-facing. The client browser is where the backend is run afterall. However, the downside to this is there is no real way to hide API secret keys, since to use the key we will have to eventually expose the secret to the end-user.

### What is the approximation being used?

We are unable to dynamically calculate the route according to user-input of source location because of API restrictions. However, since the destination location is already fixed, we can calculate a set of distances from a list of suburbs. This will be useful in providing the approximation.

#### How do we do this practically?

1. Obtain a list of Victorian suburbs and postcodes - [Matthew Proctor](https://www.matthewproctor.com/australian_postcodes#downloadlinks) has a great database of this!
2. Clean up suburbs dataset - we only really need to keep the metropolitan area subset for our usecase, so we filter by [SA4](https://www.abs.gov.au/ausstats/abs@.nsf/Lookup/by%20Subject/1270.0.55.001~July%202016~Main%20Features~Statistical%20Area%20Level%204%20(SA4)~10016). This ends up being about 800 entries.
3. Geocode each suburb to a latitutde & longitude using [Nominatim](https://nominatim.org/).
4. For each suburb, use [Open Route Service](https://openrouteservice.org/) to calculate the road distance (only about 20 of them failed).

Now we have a list of suburbs with reference road distances - how do we use this information?

#### Method 1: The Matched Suburb (Currently Applied)
This is by far the simplest, but least accurate way. From the user-input, we find the suburb of the source location:

* If a suburb is found, then we impute the road distance from the reference set.
* If a suburb is not found, we give up on calculating the road distance.

#### Method 2: The Closest Surburb

The obvious flaw with the above method is your location may be in a suburb, but you might actually be closer to another suburb's centroid! We can adjust the methodology:

1. Calculate the direct distance between the source location & each suburb.
2. Choose the suburb that is the closest to the source location and use that to impute the road distance value.

The tricky thing with this method is the computation is $\mathcal{O}(n)$ according to the complexity of the reference set. This may be fine since we have a short list, but client-side only processing may be a limiting factor.

#### Method 3: The Shortest Distance

The above method can be flawed as well, since the reference suburb you choose may actually be *further* away from your destination that the source location. The adjusted methodology is:

1. Calculate the direct distance between the source location & each suburb: $d_{gc}$
2. Find the suburb that minimises the sum of $d_{gc}$ and the road distance in the reference dataset $d_{road}$
3. The approximate road distance is precisely this sum.

The benefit of this method is that it will favour an imputed road distance of a suburb that may be *further* from the source, but actually on the way to the destination. This method is computationally equivalent to Method 2.

### What assumptions are made when calculating the fuel cost?
* Using approximate road distance where possible.
* The average fuel efficiency is [assumed](https://www.carsguide.com.au/car-advice/what-is-average-fuel-consumption-88469) to be 10L per 100km.
* The cost of fuel is assumed to be $2.5/L.
