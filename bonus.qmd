---
title: "‚≠ê Bonus ‚≠ê"
filters:
  - shinylive
resources:
  - data/metro_vic_suburbs.csv
---

# (Beta) Fuel Cost Calculator üß™

::: {.callout-important title="Important Disclaimer"}

* If you are using mobile, this may take a minute to load.
* Calculations are only **estimates** since it makes many many approximations.
* If it can't find a **road distance** the estimates could be wildly incorrect.

:::

::: {.callout-tip}
For a more accurate estimate, search your route on [Google Maps](https://www.google.com/maps) and enter the distance in the "By Distance" tab.
:::

```{shinylive-python}
#| standalone: true
#| viewerHeight: 1000

from shiny import App, ui, render, reactive
from shinywidgets import render_widget, output_widget
from ipyleaflet import Map, Marker
from math import radians, sin, cos, sqrt, atan2
from pyodide.http import open_url
import pandas as pd
import requests

DEST_LAT = -38.45956579986424
DEST_LON = 145.2472955709111

dist_heuristics = pd.read_csv(open_url('https://raw.githubusercontent.com/bbpi2/bsf-leaders-retreat-2025/refs/heads/main/data/metro_vic_suburbs.csv'))

# Haversine formula copied straight from GenAI
def great_circle_distance(lat1, lon1, lat2, lon2):
    # Radius of Earth in kilometers. Use 3956 for miles
    R = 6371.0

    # Convert degrees to radians
    œÜ1, Œª1 = radians(lat1), radians(lon1)
    œÜ2, Œª2 = radians(lat2), radians(lon2)

    # Differences
    dœÜ = œÜ2 - œÜ1
    dŒª = Œª2 - Œª1

    # Haversine formula
    a = sin(dœÜ / 2)**2 + cos(œÜ1) * cos(œÜ2) * sin(dŒª / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    return R * c  # Distance in kilometers

def dist_to_str(dist):
  return str(round(dist, 2)) + " km"

def cost_to_str(cost):
  return "$" + str(round(cost,2))

app_ui = ui.page_fluid(
  ui.navset_card_tab(
    ui.nav_panel("By Address", 
      ui.br(),
      ui.input_text("source_address", "Where are you coming from?", value = "Monash City Church of Christ", width = '200%'),
      ui.input_slider("n_pax", "Number of People in the Car:", min=2, max=6, value=2, ticks=True), 
      ui.input_task_button("search", "Search"),
      # ui.output_text("debugger"),
      ui.output_text("confirmation"),
      ui.output_table("table_output"),
      # ui.output_text("geocoder"),
      ui.page_fluid(output_widget("map")),
    ),  
    ui.nav_panel("By Distance", 
      ui.br(),
      ui.input_numeric("length", "How long is your drive in km (one way)?", 0),
      ui.input_slider("n_pax_d", "Number of People in the Car:", min=2, max=6, value=2, ticks=True),
      ui.input_task_button("search_d", "Search"),
      ui.output_table("table_output_d")
    )
  )
)

def server(input, output, session):
    @reactive.event(input.search)
    def calc_geocode():
      address = input.source_address()
      url = f"https://nominatim.openstreetmap.org/search?addressdetails=1&q={address}&format=json"
      r = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
      response = r.json()[0]
      return response

    @reactive.calc
    def parse_geocode():
      response = calc_geocode()
      lat = float(response['lat'])
      lon = float(response['lon'])
      name = response['display_name']
      gc_dist = great_circle_distance(lat, lon, DEST_LAT, DEST_LON)

      # Get suburb if exists, "" otherwise
      address = response['address']
      if address.get('suburb') is not None:
        suburb = address['suburb']
      else:
        suburb = ""  
      output = {
        'lat': lat,
        'lon': lon,
        'gc_dist': gc_dist,
        'name': name,
        'suburb': suburb
      }
      return output

    def get_road_dist(search_term):
      # Case when we can't code to a suburb
      if search_term == "":
        return -1
  
      match = dist_heuristics.loc[dist_heuristics['locality'].str.contains(search_term, case=False, na=False), 'distance']

      # Cases when can't find match or match to unknown distance metrics
      if match.empty or match.iloc[0] == "Unknown":
        result = -1
      else:
        result = float(match.iloc[0])/1e3
      return result

    # @output
    # @render.text()
    # def debugger():
    #   return parse_geocode()

    @output
    @render.text()
    def confirmation():
      return f"The address you entered is:\n{parse_geocode()['name']}"
      # return 'hello'

    @output
    @render.table
    def table_output():
      geocode = parse_geocode()
      suburb = geocode['suburb']
      # pprint_dist = lambda dist: str(round(dist, 2)) + " km"

      gc_dist = geocode['gc_dist']
      gc_dist_str = dist_to_str(gc_dist)
      road_dist = get_road_dist(suburb)
      if road_dist < 0:
        road_dist_str = "Unable to calculate road distance, using direct distance instead."
        dist = gc_dist
      else:
        road_dist_str = dist_to_str(road_dist)
        dist = road_dist

      # assuming 10 L/100km & $2.5/L fuel for return
      cost_ppax = dist * 0.1*2.5 / input.n_pax() * 2
      cost_ppax_str = cost_to_str(cost_ppax) #"$" + str(round(cost_ppax,2))

      output = []
      output.append({"Item": "Suburb", "Value": suburb})
      output.append({"Item": "Approximate Road Distance (one way)", "Value": road_dist_str})
      output.append({"Item": "Direct Distance (one way)", "Value": gc_dist_str})
      output.append({"Item": "Fuel Cost for Return/pax", "Value": cost_ppax_str})
      
      return pd.DataFrame(output)
 
    @render_widget  
    def map():
        response = calc_geocode()
        
        lat = float(response['lat'])
        lon = float(response['lon'])
        bounds = ((DEST_LAT, DEST_LON), (lat, lon))

        m = Map(center=(DEST_LAT, DEST_LON), zoom=10)
        # geo_layer = GeoJSON(
        #     data=data
        # )
        m.add(Marker(location=(DEST_LAT, DEST_LON), title="Destination"))
        m.add(Marker(location=(lat, lon)))
        print(type(lat))
        m.fit_bounds(bounds)
        # m.add(geo_layer)
        return m

    @output
    @render.table
    @reactive.event(input.search_d)
    def table_output_d():
      n_pax = input.n_pax()
      length = input.length()
      cost_ppax = length * 0.1*2.5/n_pax * 2

      output = []
      output.append({"Item": "Distance (one way)", "Value": dist_to_str(length)})
      output.append({"Item": "Fuel Cost for Return/pax", "Value": cost_to_str(cost_ppax)})
      return pd.DataFrame(output)

    # @render.table
    # def table_output():
    #   output = []
    #   output.append({"Item": "aa", "Value": 12})
    
    #   return pd.DataFrame(output)


    # @render.text
    # def echo():
    #   response = calc_geocode()
    #   lat = float(response['lat'])
    #   lon = float(response['lon'])
    #   name = response['display_name']
    #   dist = great_circle_distance(lat, lon, DEST_LAT, DEST_LON)
    #   return f'{lat}, {lon}, {name}, {dist}'

app = App(app_ui, server)

```

## All the Nerdy Details

See [appendix](appendix.qmd#appendix) for all the juicy detail.

